<?php

namespace App\Controller;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-16 at 02:43:12.
 */
class MovieCutEditControllerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MovieCutEditController
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MovieCutEditController;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers App\Controller\MovieCutEditController::initialize
     * @todo   Implement testInitialize().
     */
    public function testInitialize() {
    }

    /**
     * @covers App\Controller\MovieCutEditController::index
     * @todo   Implement testIndex().
     */
    // 正常: 33秒の動画を編集始点が10秒地点、編集終点が20秒地点で前後カットする。(カット後10秒)
    public function testIndex1() {
        
        $this->session([
            'UserData' => [
                'user_seq' => '1'
            ]
        ]);
        
        $this->configRequest([
            'headers' => [
                'X-Requested-With' => 'XMLHttpRequest',
                'Accept' => 'application/json',
                'ContentType' => 'application/json; charset=utf-8'
            ],
                'movie_contents_id' => 1,
                'movie_edit_mode' => 0,
                'movie_edit_start' => 10.00,
                'movie_edit_end' => 20.00
        ]);
        
        $message =  "受付が完了しました。";
        
         $this->assertEquals(
            $this->object->index(), $message);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::index
     * @todo   Implement testIndex().
     */
    // 正常: 33秒の動画を編集始点が10秒地点、編集終点が20秒地点で途中カットする。(カット後13秒)
    public function testIndex2() {
        
        $this->session([
            'UserData' => [
                'user_seq' => '1'
            ]
        ]);
        
        $this->configRequest([
            'headers' => [
                'X-Requested-With' => 'XMLHttpRequest',
                'Accept' => 'application/json',
                'ContentType' => 'application/json; charset=utf-8'
            ],
                'movie_contents_id' => 1,
                'movie_edit_mode' => 1,
                'movie_edit_start' => 10.00,
                'movie_edit_end' => 20.00
        ]);
        
        $message =  "受付が完了しました。";
        
         $this->assertEquals(
            $this->object->index(), $message);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::index
     * @todo   Implement testIndex().
     */
    // 正常: 33秒の動画を編集始点が10秒地点、編集終点が20秒地点で途中カットする。(カット後13秒)
    public function testIndex2() {

        $this->session([
            'UserData' => [
                'user_seq' => '1'
            ]
        ]);
        
        $this->configRequest([
            'headers' => [
                'X-Requested-With' => 'XMLHttpRequest',
                'Accept' => 'application/json',
                'ContentType' => 'application/json; charset=utf-8'
            ],
                'movie_contents_id' => 1,
                'movie_edit_mode' => 1,
                'movie_edit_start' => 10.00,
                'movie_edit_end' => 20.00
        ]);
        
        $message =  "受付が完了しました。";
        
         $this->assertEquals(
            $this->object->index(), $message);
    }

    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditMode
     * @todo   Implement testValidateMovieEditMode().
     */
    // 正常
    public function testValidateMovieEditMode1() {
        $movieEditMode = 0;
        
        $this->assertEquals(
            $this->object->validateMovieEditMode($movieEditMode), true);
        
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditMode
     * @todo   Implement testValidateMovieEditMode().
     */
    // 正常
    public function testValidateMovieEditMode2() {
        $movieEditMode = 1;
        
        $this->assertEquals(
            $this->object->validateMovieEditMode($movieEditMode), true);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditMode
     * @todo   Implement testValidateMovieEditMode().
     */
    // 不正
    public function testValidateMovieEditMode3() {
        $movieEditMode = 2;
        
        $this->assertEquals(
            $this->object->validateMovieEditMode($movieEditMode), false);
    }

    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditMode
     * @todo   Implement testValidateMovieEditMode().
     */
    // 不正
    public function testValidateMovieEditMode4() {
        $movieEditMode = -1;
        
        $this->assertEquals(
            $this->object->validateMovieEditMode($movieEditMode), false);
    }
    
    
    
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 正常
    public function testValidateMovieEditStartAndEnd1() {
        $movieEditStart = 1.00;
        $movieEditEnd = 9.00;
        $reproductionTime = 10.00;
                
        $this->assertEquals(
            $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), true);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 始点が最小値、終点が最大値
    public function testValidateMovieEditStartAndEnd2() {
        $movieEditStart = 0.00;
        $movieEditEnd = 10.00;
        $reproductionTime = 10.00;
                
        $this->assertEquals(
            $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), true);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 編集始点が不正
    public function testValidateMovieEditStartAndEnd3() {
        $movieEditStart = -0.01;
        $movieEditEnd = 3.00;
        $reproductionTime = 10.00;
               
        $this->assertEquals(
            $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), false);
    }
    
      /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 編集終点が不正
    public function testValidateMovieEditStartAndEnd4() {
        $movieEditStart = 1.00;
        $movieEditEnd = 10.01;
        $reproductionTime = 10.00;
               
        $this->assertEquals(
            $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), false);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 始点が終点より大きい
    public function testValidateMovieEditStartAndEnd5() {
        $movieEditStart = 5.00;
        $movieEditEnd = 5.00;
       $reproductionTime = 10.00;
            
        $this->assertEquals(
             $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), false);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 始点が終点より大きい
    public function testValidateMovieEditStartAndEnd6() {
        $movieEditStart = 5.01;
        $movieEditEnd = 5.00;
        $reproductionTime = 10.00;
        
        $this->assertEquals(
           $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), false);
    }
   
        /**
     * @covers App\Controller\MovieCutEditController::validateMovieEditStartAndEnd
     * @todo   Implement testValidateMovieEditStartAndEnd().
     */
    // 始点と終点が同じ値
    public function testValidateMovieEditStartAndEnd7() {
        $movieEditStart = 5.00;
        $movieEditEnd = 5.00;
        $reproductionTime = 10.00;
            
        $this->assertEquals(
              $this->object->validateMovieEditStartAndEnd($movieEditStart, $movieEditEnd ,$reproductionTime), true);
    }
    
    
    
    
    /**
     * @covers App\Controller\MovieCutEditController::textToSecond
     * @todo   Implement testTextToSecond().
     */
    public function testTextToSecond1() {
        $textTime = "12:23.11";      
        
        $this->assertEquals(
            $this->object->textToSecond($textTime), 743.11);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::textToSecond
     * @todo   Implement testTextToSecond().
     */
    public function testTextToSecond2() {
        $textTime = "00:13.11";
        
        $this->assertEquals(
            $this->object->textToSecond($textTime), 13.11);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::textToSecond
     * @todo   Implement testTextToSecond().
     */
    public function testTextToSecond3() {
        $textTime = "01:00.93";
       
        $this->assertEquals(
            $this->object->textToSecond($textTime), 60.93);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::textToSecond
     * @todo   Implement testTextToSecond().
     */
    public function testTextToSecond4() {
        $textTime = "00:00.93";
        
        $this->assertEquals(
            $this->object->textToSecond($textTime), 0.93);
    }
    
    /**
     * @covers App\Controller\MovieCutEditController::textToSecond
     * @todo   Implement testTextToSecond().
     */
    public function testTextToSecond5() {
        $textTime = "00:00.00";
        
        $this->assertEquals(
           $this->object->textToSecond($textTime), 0);
    }

}
